generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts    Account[]
  sessions    Session[]
  cards       BusinessCard[]
  analytics   Analytics[]
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      String?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model BusinessCard {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String   @default("Business Card")
  slug        String   @unique
  isActive    Boolean  @default(true) @map("is_active")
  data        Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics   Analytics[]
  shares      Share[]

  @@map("business_cards")
}

model Analytics {
  id                String   @id @default(cuid())
  cardId            String   @map("card_id")
  userId            String   @map("user_id")
  views             Int      @default(0)
  qrScans           Int      @default(0) @map("qr_scans")
  contactClicks     Int      @default(0) @map("contact_clicks")
  socialClicks      Int      @default(0) @map("social_clicks")
  uniqueVisitors    Int      @default(0) @map("unique_visitors")
  deviceBreakdown   Json     @default("{}")
  geoData           Json     @default("{}")
  referrerData      Json     @default("{}")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  card            BusinessCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

model Share {
  id              String      @id @default(cuid())
  cardId          String      @map("card_id")
  shareType       ShareType   @map("share_type")
  recipientEmail  String?     @map("recipient_email")
  recipientName   String?     @map("recipient_name")
  message         String?
  isViewed        Boolean     @default(false) @map("is_viewed")
  viewedAt        DateTime?   @map("viewed_at")
  createdAt       DateTime    @default(now()) @map("created_at")

  card            BusinessCard @relation(fields: [cardId], references: [id], onDelete: Cascade)

  @@map("shares")
}

model Team {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  plan            Plan     @default(FREE)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  members         User[]
  templates       Template[]

  @@map("teams")
}

model Template {
  id              String   @id @default(cuid())
  teamId          String?  @map("team_id")
  name            String
  description     String?
  data            Json
  isPublic        Boolean  @default(false) @map("is_public")
  category        String   @default("business")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  team            Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("templates")
}

model Integration {
  id              String      @id @default(cuid())
  userId          String      @map("user_id")
  provider        String
  providerUserId  String?     @map("provider_user_id")
  accessToken     String?     @map("access_token") @db.Text
  refreshToken    String?     @map("refresh_token") @db.Text
  expiresAt       DateTime?   @map("expires_at")
  isActive        Boolean     @default(true) @map("is_active")
  config          Json        @default("{}")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  @@unique([userId, provider])
  @@map("integrations")
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

enum ShareType {
  EMAIL
  QR_CODE
  LINK
  NFC
  SOCIAL_MEDIA
}